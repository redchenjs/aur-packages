name: intel-cpu-runtime

on:
  workflow_dispatch:
  schedule:
    - cron: 35 09 * * *

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Get latest package version
        shell: bash {0}
        run: |
          echo "AUR_PKGNAME=intel-cpu-runtime" >> $GITHUB_ENV
          curl -s -L https://apt.repos.intel.com/oneapi/dists/all/main/binary-amd64/Packages -o packages
          echo "TBB_VERSION=$(cat packages | grep 'intel-oneapi-runtime-tbb-.*deb' | sort -r | head -n 1 | sed -r 's|.*-(.*)-.*_.*$|\1|g')" >> $GITHUB_ENV
          echo "TBB_RELEASE=$(cat packages | grep 'intel-oneapi-runtime-tbb-.*deb' | sort -r | head -n 1 | sed -r 's|.*-.*-(.*)_.*$|\1|g')" >> $GITHUB_ENV
          echo "OPENCL_VERSION=$(cat packages | grep 'intel-oneapi-runtime-opencl-.*deb' | sort -r | head -n 1 | sed -r 's|.*-(.*)-.*_.*$|\1|g')" >> $GITHUB_ENV
          echo "OPENCL_RELEASE=$(cat packages | grep 'intel-oneapi-runtime-opencl-.*deb' | sort -r | head -n 1 | sed -r 's|.*-.*-(.*)_.*$|\1|g')" >> $GITHUB_ENV
      - name: Setup SSH & Git
        shell: bash {0}
        run: |
          mkdir ~/.ssh
          ssh-keyscan -t "rsa,dsa,ecdsa,ed25519" aur.archlinux.org > ~/.ssh/known_hosts
          echo "${{ secrets.AUR_SSH_CONFIG }}" > ~/.ssh/config
          echo "${{ secrets.AUR_SSH_PRIVATE_KEY }}" > ~/.ssh/aur
          echo "${{ secrets.AUR_SSH_PUBLIC_KEY }}" > ~/.ssh/aur.pub
          chmod 600 ~/.ssh/aur
          git config --global user.name "${{ secrets.AUR_COMMIT_USERNAME }}"
          git config --global user.email "${{ secrets.AUR_COMMIT_EMAIL }}"
      - name: Checkout AUR repository
        shell: bash {0}
        run: |
          git clone ssh://aur@aur.archlinux.org/intel-cpu-runtime.git
      - name: Compile & Install Pacman
        shell: bash {0}
        run: |
          sudo apt update
          sudo apt install build-essential meson ninja-build libarchive-dev libcurl4-openssl-dev libgpgme-dev libssl-dev nettle-dev
          git clone https://gitlab.archlinux.org/pacman/pacman.git
          cd pacman
          mkdir build && cd build
          meson ../
          ninja build -C .
          sudo ninja install
      - name: Update PKGBUILD
        shell: bash {0}
        run: |
          cd ${{ env.AUR_PKGNAME }}
          sed -r -i "s|^_pkgver=.*|_pkgver=${{ env.TBB_VERSION }}|g" PKGBUILD
          sed -r -i "s|^_pkgrel=.*|_pkgrel=${{ env.TBB_RELEASE }}|g" PKGBUILD
          sed -r -i "s|^pkgver=.*|pkgver=${{ env.OPENCL_VERSION }}|g" PKGBUILD
          sed -r -i "s|^pkgrel=.*|pkgrel=${{ env.OPENCL_RELEASE }}|g" PKGBUILD
          makepkg --printsrcinfo > .SRCINFO
      - name: Update AUR repository
        shell: bash {0}
        run: |
          cd ${{ env.AUR_PKGNAME }}
          git commit -a -m "update to ${{ env.OPENCL_VERSION }}-${{ env.OPENCL_RELEASE }}" || true
          git push
